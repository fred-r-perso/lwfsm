<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="lwfsm_8h" kind="file" language="C++">
    <compoundname>lwfsm.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includes refid="lwfsm__opt_8h" local="yes">lwfsm_opt.h</includes>
    <includes refid="lwfsm__log_8h" local="yes">lwfsm_log.h</includes>
    <includedby refid="lwfsm_8c" local="yes">/__w/lwfsm/lwfsm/lwfsm/src/lwfsm/lwfsm.c</includedby>
    <includedby refid="lwfsm__app__model1__template_8c" local="yes">/__w/lwfsm/lwfsm/lwfsm/src/lwfsm/lwfsm_app_model1_template.c</includedby>
    <includedby refid="lwfsm__app__model2__template_8c" local="yes">/__w/lwfsm/lwfsm/lwfsm/src/lwfsm/lwfsm_app_model2_template.c</includedby>
    <incdepgraph>
      <node id="1">
        <label>stdint.h</label>
      </node>
      <node id="2">
        <label>lwfsm_opt.h</label>
        <link refid="lwfsm__opt_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="0">
        <label>/__w/lwfsm/lwfsm/lwfsm/src/include/lwfsm/lwfsm.h</label>
        <link refid="lwfsm_8h"/>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>lwfsm_log.h</label>
        <link refid="lwfsm__log_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>lwfsm_opts.h</label>
      </node>
      <node id="5">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="9">
        <label>/__w/lwfsm/lwfsm/lwfsm/src/lwfsm/lwfsm_app_model2_template.c</label>
        <link refid="lwfsm__app__model2__template_8c"/>
      </node>
      <node id="6">
        <label>/__w/lwfsm/lwfsm/lwfsm/src/include/lwfsm/lwfsm.h</label>
        <link refid="lwfsm_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>/__w/lwfsm/lwfsm/lwfsm/src/lwfsm/lwfsm_app_model1_template.c</label>
        <link refid="lwfsm__app__model1__template_8c"/>
      </node>
      <node id="7">
        <label>/__w/lwfsm/lwfsm/lwfsm/src/lwfsm/lwfsm.c</label>
        <link refid="lwfsm_8c"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structlwfsm__table__row__t" prot="public">lwfsm_table_row_t</innerclass>
    <innerclass refid="structlwfsm__ctxt__t" prot="public">lwfsm_ctxt_t</innerclass>
    <innerclass refid="structlwfsm__ctxt2__t" prot="public">lwfsm_ctxt2_t</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__LwFSM__Macros_1ga715a6eaac42f18c17cdb876aa6ba603b" prot="public" static="no">
        <name>LWFSM_STOP_SUCCESS</name>
        <initializer>0xFFFFFFFEUL</initializer>
        <briefdescription>
<para>Fake FSM state indicating to stop running the FSM (normal stop) </para>        </briefdescription>
        <detaileddescription>
<para>We want to stop the FSM processing as we reached its expected termination point. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/lwfsm/lwfsm/lwfsm/src/include/lwfsm/lwfsm.h" line="126" column="9" bodyfile="/__w/lwfsm/lwfsm/lwfsm/src/include/lwfsm/lwfsm.h" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__LwFSM__Macros_1ga161fd13c3f0fc1d82a3bc22a58fa633e" prot="public" static="no">
        <name>LWFSM_STOP_ERROR</name>
        <initializer>0xFFFFFFFFUL</initializer>
        <briefdescription>
<para>Fake FSM state indicating to stop running the FSM (error encountered) </para>        </briefdescription>
        <detaileddescription>
<para>We want to stop the FSM processing as an unexpected error occurred. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/lwfsm/lwfsm/lwfsm/src/include/lwfsm/lwfsm.h" line="133" column="9" bodyfile="/__w/lwfsm/lwfsm/lwfsm/src/include/lwfsm/lwfsm.h" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__LwFSM__Macros_1gac21ce3d980668fa04aa139d8668562c7" prot="public" static="no">
        <name>LWFSM_STATES_START</name>
        <param><defname>states_list</defname></param>
        <initializer>typedef enum {</initializer>
        <briefdescription>
<para>Starts a new list of FSM states description. </para>        </briefdescription>
        <detaileddescription>
<para>It starts the description of the list of states. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/lwfsm/lwfsm/lwfsm/src/include/lwfsm/lwfsm.h" line="140" column="9" bodyfile="/__w/lwfsm/lwfsm/lwfsm/src/include/lwfsm/lwfsm.h" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__LwFSM__Macros_1ga7ca4246c6f9ad044558e01e86bf50780" prot="public" static="no">
        <name>LWFSM_STATES_DECL</name>
        <param><defname>fsm_state</defname></param>
        <initializer>fsm_state,</initializer>
        <briefdescription>
<para>Declares a new FSM state - Model #1. </para>        </briefdescription>
        <detaileddescription>
<para>It adds a new state in the list of states. /!\ The initial state must be the first one in this list. /!\</para><para>See: <ref refid="lwfsm__app__model1__template_8c" kindref="compound">lwfsm_app_model1_template.c</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/lwfsm/lwfsm/lwfsm/src/include/lwfsm/lwfsm.h" line="150" column="9" bodyfile="/__w/lwfsm/lwfsm/lwfsm/src/include/lwfsm/lwfsm.h" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__LwFSM__Macros_1ga99ead8ed2ab2224e3b413649e8b8a0b0" prot="public" static="no">
        <name>LWFSM_STATES_FULL_DECL</name>
        <param><defname>fsm_state</defname></param>
        <param><defname>fsm_state_name</defname></param>
        <param><defname>fsm_state_function</defname></param>
        <initializer>redefine_me_in_the_code</initializer>
        <briefdescription>
<para>Declares a new FSM state - Model #2. </para>        </briefdescription>
        <detaileddescription>
<para>It adds a new state in the FSM. This macro must be redefined in the code depending on what is being defined: list of states, list of state names, fsm table.</para><para>See: <ref refid="lwfsm__app__model2__template_8c" kindref="compound">lwfsm_app_model2_template.c</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/lwfsm/lwfsm/lwfsm/src/include/lwfsm/lwfsm.h" line="162" column="9" bodyfile="/__w/lwfsm/lwfsm/lwfsm/src/include/lwfsm/lwfsm.h" bodystart="162" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__LwFSM__Macros_1ga6e8e57867e6a527dda0ecd6357591a23" prot="public" static="no">
        <name>LWFSM_STATES_END</name>
        <param><defname>states_list</defname></param>
        <initializer>} lwfsm_##states_list##_t; /* FSM states */</initializer>
        <briefdescription>
<para>Ends a new list of FSM states description. </para>        </briefdescription>
        <detaileddescription>
<para>It closes the description of the list of states. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/lwfsm/lwfsm/lwfsm/src/include/lwfsm/lwfsm.h" line="169" column="9" bodyfile="/__w/lwfsm/lwfsm/lwfsm/src/include/lwfsm/lwfsm.h" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__LwFSM__Macros_1ga6fd32c62089945bf5c7ebdcab41de5b7" prot="public" static="no">
        <name>LWFSM_TABLE_START</name>
        <param><defname>table_name</defname></param>
        <initializer>const <ref refid="structlwfsm__table__row__t" kindref="compound">lwfsm_table_row_t</ref> table_name[] = {</initializer>
        <briefdescription>
<para>Starts a new FSM table description. </para>        </briefdescription>
        <detaileddescription>
<para>It starts the description of a Finite State Machine. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/lwfsm/lwfsm/lwfsm/src/include/lwfsm/lwfsm.h" line="177" column="9" bodyfile="/__w/lwfsm/lwfsm/lwfsm/src/include/lwfsm/lwfsm.h" bodystart="177" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__LwFSM__Macros_1gad87a9e1cce6fc08e89933265e55b6ac7" prot="public" static="no">
        <name>LWFSM_TABLE_ENTRY</name>
        <param><defname>state_function</defname></param>
        <initializer>{state_function},</initializer>
        <briefdescription>
<para>Declares a new FSM state function - Model #1. </para>        </briefdescription>
        <detaileddescription>
<para>It declares a FSM state function in the FSM table. /!\ The state functions must be added in the same order as the states declaration. /!\ </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/lwfsm/lwfsm/lwfsm/src/include/lwfsm/lwfsm.h" line="185" column="9" bodyfile="/__w/lwfsm/lwfsm/lwfsm/src/include/lwfsm/lwfsm.h" bodystart="185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__LwFSM__Macros_1ga428f76188b9d9fb7891f2e01b5d5703c" prot="public" static="no">
        <name>LWFSM_TABLE_END</name>
        <param><defname>table_name</defname></param>
        <initializer>};</initializer>
        <briefdescription>
<para>Closes a FSM table description. </para>        </briefdescription>
        <detaileddescription>
<para>It ends the description of a Finite State Machine. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/lwfsm/lwfsm/lwfsm/src/include/lwfsm/lwfsm.h" line="192" column="9" bodyfile="/__w/lwfsm/lwfsm/lwfsm/src/include/lwfsm/lwfsm.h" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__LwFSM__Macros_1ga5fdaff8a2635b38f9115e138087e1d28" prot="public" static="no">
        <name>LWFSM_LOGS_NAME_START</name>
        <param><defname>states_log_names</defname></param>
        <initializer>const char * states_log_names[] = {</initializer>
        <briefdescription>
<para>Starts a new list of FSM states log names description. </para>        </briefdescription>
        <detaileddescription>
<para>It starts the description of the list of log strings to be used for the FSM states. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/lwfsm/lwfsm/lwfsm/src/include/lwfsm/lwfsm.h" line="200" column="9" bodyfile="/__w/lwfsm/lwfsm/lwfsm/src/include/lwfsm/lwfsm.h" bodystart="200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__LwFSM__Macros_1gacf7268f80d00bd916e65322d97c90b7b" prot="public" static="no">
        <name>LWFSM_LOG_NAME_DECL</name>
        <param><defname>fsm_state_name</defname></param>
        <initializer>fsm_state_name,</initializer>
        <briefdescription>
<para>Declares a new FSM state log name - Model #1. </para>        </briefdescription>
        <detaileddescription>
<para>It adds a new state in the list of states log names. /!\ The state log name must be added in the same order as the states declaration. /!\ </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/lwfsm/lwfsm/lwfsm/src/include/lwfsm/lwfsm.h" line="208" column="9" bodyfile="/__w/lwfsm/lwfsm/lwfsm/src/include/lwfsm/lwfsm.h" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__LwFSM__Macros_1ga14f596f7e0685f15a93bc45c99655bf5" prot="public" static="no">
        <name>LWFSM_LOGS_NAME_END</name>
        <param><defname>states_log_names</defname></param>
        <initializer>};</initializer>
        <briefdescription>
<para>Ends a new list of FSM states log names description. </para>        </briefdescription>
        <detaileddescription>
<para>It closes the description of log strings to be used for the FSM states. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/lwfsm/lwfsm/lwfsm/src/include/lwfsm/lwfsm.h" line="215" column="9" bodyfile="/__w/lwfsm/lwfsm/lwfsm/src/include/lwfsm/lwfsm.h" bodystart="215" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__LwFSM__Types_1gac5dfb37d24f02ace29c00c45af5553ec" prot="public" static="no">
        <name>lwfsm_status_t</name>
        <enumvalue id="group__LwFSM__Types_1ggac5dfb37d24f02ace29c00c45af5553ecaad55026fd5428c45adb2b3072118c616" prot="public">
          <name>LWFSM_OK</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The FSM state machine call succeeded </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__LwFSM__Types_1ggac5dfb37d24f02ace29c00c45af5553ecabdafd9ba79b33c3afdd8a644efebe8a6" prot="public">
          <name>LWFSM_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The FSM state machine call encountered an error </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Return value of the FSM run function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/lwfsm/lwfsm/lwfsm/src/include/lwfsm/lwfsm.h" line="80" column="1" bodyfile="/__w/lwfsm/lwfsm/lwfsm/src/include/lwfsm/lwfsm.h" bodystart="80" bodyend="83"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__LwFSM__Types_1ga1f824da4c340448f2fab98a2a3d7111a" prot="public" static="no">
        <type>uint32_t(*</type>
        <definition>typedef uint32_t(* lwfsm_state_func_t) (void *opaque_ctxt)</definition>
        <argsstring>)(void *opaque_ctxt)</argsstring>
        <name>lwfsm_state_func_t</name>
        <briefdescription>
<para>C function implementing a FSM state. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>opaque_ctxt</parametername>
</parameternamelist>
<parameterdescription>
<para>an opaque context for the state (if LWFSM_USE_CONTEXT is enabled) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the next FSM state</para></simplesect>
Function implementing the logic a FSM state must run. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/lwfsm/lwfsm/lwfsm/src/include/lwfsm/lwfsm.h" line="61" column="1" bodyfile="/__w/lwfsm/lwfsm/lwfsm/src/include/lwfsm/lwfsm.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__LwFSM__API__M1_1ga5d031ea56c1b3524b1ff6978f636fb5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__LwFSM__Types_1gac5dfb37d24f02ace29c00c45af5553ec" kindref="member">lwfsm_status_t</ref></type>
        <definition>lwfsm_status_t lwfsm_init_state_machine</definition>
        <argsstring>(lwfsm_ctxt_t *fsm_ctxt, const lwfsm_table_row_t *fsm_table, const char **states_log_names, const uint32_t initial_state)</argsstring>
        <name>lwfsm_init_state_machine</name>
        <param>
          <type><ref refid="structlwfsm__ctxt__t" kindref="compound">lwfsm_ctxt_t</ref> *</type>
          <declname>fsm_ctxt</declname>
        </param>
        <param>
          <type>const <ref refid="structlwfsm__table__row__t" kindref="compound">lwfsm_table_row_t</ref> *</type>
          <declname>fsm_table</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>states_log_names</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>initial_state</declname>
        </param>
        <briefdescription>
<para>FSM engine initialization. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fsm_ctxt</parametername>
</parameternamelist>
<parameterdescription>
<para>definition of the FSM to run, allocated by the caller (see <ref refid="structlwfsm__ctxt__t" kindref="compound">lwfsm_ctxt_t</ref>) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fsm_table</parametername>
</parameternamelist>
<parameterdescription>
<para>the table of C functions implementing the FSM states logic </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>states_log_names</parametername>
</parameternamelist>
<parameterdescription>
<para>FSM states names to be printed in the logs if LWFSM_USE_LOG is enabled </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initial_state</parametername>
</parameternamelist>
<parameterdescription>
<para>initial state of this FSM </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>see <ref refid="group__LwFSM__Types_1gac5dfb37d24f02ace29c00c45af5553ec" kindref="member">lwfsm_status_t</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/lwfsm/lwfsm/lwfsm/src/include/lwfsm/lwfsm.h" line="243" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__LwFSM__API__M1_1gad54a06d0aa371d4a631a1fe056f8bd0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__LwFSM__Types_1gac5dfb37d24f02ace29c00c45af5553ec" kindref="member">lwfsm_status_t</ref></type>
        <definition>lwfsm_status_t lwfsm_run_state_machine</definition>
        <argsstring>(lwfsm_ctxt_t *fsm_ctxt, void *user_ctxt)</argsstring>
        <name>lwfsm_run_state_machine</name>
        <param>
          <type><ref refid="structlwfsm__ctxt__t" kindref="compound">lwfsm_ctxt_t</ref> *</type>
          <declname>fsm_ctxt</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_ctxt</declname>
        </param>
        <briefdescription>
<para>FSM engine loop. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fsm_ctxt</parametername>
</parameternamelist>
<parameterdescription>
<para>definition of the FSM to run (see <ref refid="structlwfsm__ctxt__t" kindref="compound">lwfsm_ctxt_t</ref>) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_ctxt</parametername>
</parameternamelist>
<parameterdescription>
<para>an opaque user context to be used in the FSM state functions </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>see <ref refid="group__LwFSM__Types_1gac5dfb37d24f02ace29c00c45af5553ec" kindref="member">lwfsm_status_t</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/lwfsm/lwfsm/lwfsm/src/include/lwfsm/lwfsm.h" line="255" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__LwFSM__API__M2_1gaa16284f1422ff96d7bc550deb7ef97ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__LwFSM__Types_1gac5dfb37d24f02ace29c00c45af5553ec" kindref="member">lwfsm_status_t</ref></type>
        <definition>lwfsm_status_t lwfsm_init_state_machineM2</definition>
        <argsstring>(lwfsm_ctxt2_t *fsm_ctxt, const lwfsm_table_row_t *fsm_table, const char **states_log_names, const uint32_t initial_state, const uint32_t nb_states)</argsstring>
        <name>lwfsm_init_state_machineM2</name>
        <param>
          <type><ref refid="structlwfsm__ctxt2__t" kindref="compound">lwfsm_ctxt2_t</ref> *</type>
          <declname>fsm_ctxt</declname>
        </param>
        <param>
          <type>const <ref refid="structlwfsm__table__row__t" kindref="compound">lwfsm_table_row_t</ref> *</type>
          <declname>fsm_table</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>states_log_names</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>initial_state</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>nb_states</declname>
        </param>
        <briefdescription>
<para>FSM engine initialization. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fsm_ctxt</parametername>
</parameternamelist>
<parameterdescription>
<para>definition of the FSM to run, allocated by the caller (see <ref refid="structlwfsm__ctxt__t" kindref="compound">lwfsm_ctxt_t</ref>) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fsm_table</parametername>
</parameternamelist>
<parameterdescription>
<para>the table of C functions implementing the FSM states logic </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>states_log_names</parametername>
</parameternamelist>
<parameterdescription>
<para>FSM states names to be printed in the logs if LWFSM_USE_LOG is enabled </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initial_state</parametername>
</parameternamelist>
<parameterdescription>
<para>initial state of this FSM </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nb_states</parametername>
</parameternamelist>
<parameterdescription>
<para>number of FSM states in the state machine </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>see <ref refid="group__LwFSM__Types_1gac5dfb37d24f02ace29c00c45af5553ec" kindref="member">lwfsm_status_t</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/lwfsm/lwfsm/lwfsm/src/include/lwfsm/lwfsm.h" line="285" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__LwFSM__API__M2_1ga711182eae8128494523ed4865433e2d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__LwFSM__Types_1gac5dfb37d24f02ace29c00c45af5553ec" kindref="member">lwfsm_status_t</ref></type>
        <definition>lwfsm_status_t lwfsm_run_state_machineM2</definition>
        <argsstring>(lwfsm_ctxt2_t *fsm_ctxt, void *user_ctxt)</argsstring>
        <name>lwfsm_run_state_machineM2</name>
        <param>
          <type><ref refid="structlwfsm__ctxt2__t" kindref="compound">lwfsm_ctxt2_t</ref> *</type>
          <declname>fsm_ctxt</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_ctxt</declname>
        </param>
        <briefdescription>
<para>FSM engine loop. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fsm_ctxt</parametername>
</parameternamelist>
<parameterdescription>
<para>definition of the FSM to run (see <ref refid="structlwfsm__ctxt__t" kindref="compound">lwfsm_ctxt_t</ref>) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_ctxt</parametername>
</parameternamelist>
<parameterdescription>
<para>an opaque user context to be used in the FSM state functions </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>see <ref refid="group__LwFSM__Types_1gac5dfb37d24f02ace29c00c45af5553ec" kindref="member">lwfsm_status_t</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/__w/lwfsm/lwfsm/lwfsm/src/include/lwfsm/lwfsm.h" line="297" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>LwFSM API. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="6"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2022<sp/>Frederic<sp/>RUELLE</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>obtaining<sp/>a<sp/>copy<sp/>of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal<sp/>in<sp/>the<sp/>Software<sp/>without<sp/>restriction,</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell<sp/>copies<sp/>of<sp/>the<sp/>Software,</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is<sp/>furnished<sp/>to<sp/>do<sp/>so,</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>included<sp/>in<sp/>all<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>EXPRESS<sp/>OR<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>OF<sp/>MERCHANTABILITY,<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER<sp/>LIABILITY,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>FROM,<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>LwFSM<sp/>-<sp/>Lightweight<sp/>FSM<sp/>manager.</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>Author:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Frederic<sp/>RUELLE<sp/>&lt;frederic.ruelle@free.fr&gt;</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>Version:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v0.1.0</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>LWFSM_HDR_API_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LWFSM_HDR_API_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>lwfsm<sp/>uses<sp/>stddint<sp/>types<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="lwfsm__opt_8h" kindref="compound">lwfsm_opt.h</ref>&quot;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>lwfsm<sp/>configuration<sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="lwfsm__log_8h" kindref="compound">lwfsm_log.h</ref>&quot;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>lwfsm<sp/>log<sp/>porting<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>__cplusplus<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="preprocessor">#if<sp/>LWFSM_USE_CONTEXT<sp/>==<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>opaque<sp/>context<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="group__LwFSM__Types_1ga1f824da4c340448f2fab98a2a3d7111a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint32_t<sp/>(*<ref refid="group__LwFSM__Types_1ga1f824da4c340448f2fab98a2a3d7111a" kindref="member">lwfsm_state_func_t</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>opaque_ctxt);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint32_t<sp/>(*<ref refid="group__LwFSM__Types_1ga1f824da4c340448f2fab98a2a3d7111a" kindref="member">lwfsm_state_func_t</ref>)(void);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>LWFSM_USE_CONTEXT<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="structlwfsm__table__row__t" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="72" refid="structlwfsm__table__row__t_1a0009298462d5a61e915ac3387d841a2a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="group__LwFSM__Types_1ga1f824da4c340448f2fab98a2a3d7111a" kindref="member">lwfsm_state_func_t</ref><sp/><ref refid="structlwfsm__table__row__t_1a0009298462d5a61e915ac3387d841a2a" kindref="member">state_function</ref>;<sp/></highlight></codeline>
<codeline lineno="73"><highlight class="normal">}<sp/><ref refid="structlwfsm__table__row__t" kindref="compound">lwfsm_table_row_t</ref>;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="group__LwFSM__Types_1gac5dfb37d24f02ace29c00c45af5553ec" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="81" refid="group__LwFSM__Types_1ggac5dfb37d24f02ace29c00c45af5553ecaad55026fd5428c45adb2b3072118c616" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="group__LwFSM__Types_1ggac5dfb37d24f02ace29c00c45af5553ecaad55026fd5428c45adb2b3072118c616" kindref="member">LWFSM_OK</ref><sp/>=<sp/>0,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="82" refid="group__LwFSM__Types_1ggac5dfb37d24f02ace29c00c45af5553ecabdafd9ba79b33c3afdd8a644efebe8a6" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="group__LwFSM__Types_1ggac5dfb37d24f02ace29c00c45af5553ecabdafd9ba79b33c3afdd8a644efebe8a6" kindref="member">LWFSM_ERROR</ref><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="83"><highlight class="normal">}<sp/><ref refid="group__LwFSM__Types_1gac5dfb37d24f02ace29c00c45af5553ec" kindref="member">lwfsm_status_t</ref>;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="structlwfsm__ctxt__t" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="91" refid="structlwfsm__ctxt__t_1ab8c24172e983044f0972da709ac8fec4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlwfsm__table__row__t" kindref="compound">lwfsm_table_row_t</ref><sp/>*<ref refid="structlwfsm__ctxt__t_1ab8c24172e983044f0972da709ac8fec4" kindref="member">fsm_table</ref>;<sp/></highlight></codeline>
<codeline lineno="92" refid="structlwfsm__ctxt__t_1a56b2fcc9bfe0cf695a6742f0bb42ce55" refkind="member"><highlight class="normal"><sp/><sp/>uint32_t<sp/><ref refid="structlwfsm__ctxt__t_1a56b2fcc9bfe0cf695a6742f0bb42ce55" kindref="member">cur_state</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="93"><highlight class="preprocessor">#if<sp/>LWFSM_USE_LOG<sp/>==<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="structlwfsm__ctxt__t_1a61d5b6d225fd8e454dd1e9bb3a1d6fe2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>*<ref refid="structlwfsm__ctxt__t_1a61d5b6d225fd8e454dd1e9bb3a1d6fe2" kindref="member">log_names</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="95"><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>LWFSM_USE_LOG<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal">}<sp/><ref refid="structlwfsm__ctxt__t" kindref="compound">lwfsm_ctxt_t</ref>;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="102" refid="structlwfsm__ctxt2__t" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="103" refid="structlwfsm__ctxt2__t_1ab8c24172e983044f0972da709ac8fec4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlwfsm__table__row__t" kindref="compound">lwfsm_table_row_t</ref><sp/>*<ref refid="structlwfsm__ctxt2__t_1ab8c24172e983044f0972da709ac8fec4" kindref="member">fsm_table</ref>;<sp/></highlight></codeline>
<codeline lineno="104" refid="structlwfsm__ctxt2__t_1a56b2fcc9bfe0cf695a6742f0bb42ce55" refkind="member"><highlight class="normal"><sp/><sp/>uint32_t<sp/><ref refid="structlwfsm__ctxt2__t_1a56b2fcc9bfe0cf695a6742f0bb42ce55" kindref="member">cur_state</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="105"><highlight class="preprocessor">#if<sp/>LWFSM_USE_LOG<sp/>==<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="structlwfsm__ctxt2__t_1a61d5b6d225fd8e454dd1e9bb3a1d6fe2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>*<ref refid="structlwfsm__ctxt2__t_1a61d5b6d225fd8e454dd1e9bb3a1d6fe2" kindref="member">log_names</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="107"><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>LWFSM_USE_LOG<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108" refid="structlwfsm__ctxt2__t_1a05ffe2cf457de5fcb95d56ec2a9fab85" refkind="member"><highlight class="normal"><sp/><sp/>uint32_t<sp/><ref refid="structlwfsm__ctxt2__t_1a05ffe2cf457de5fcb95d56ec2a9fab85" kindref="member">nb_states</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="109"><highlight class="normal">}<sp/><ref refid="structlwfsm__ctxt2__t" kindref="compound">lwfsm_ctxt2_t</ref>;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="126" refid="group__LwFSM__Macros_1ga715a6eaac42f18c17cdb876aa6ba603b" refkind="member"><highlight class="preprocessor">#define<sp/>LWFSM_STOP_SUCCESS<sp/>0xFFFFFFFEUL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="133" refid="group__LwFSM__Macros_1ga161fd13c3f0fc1d82a3bc22a58fa633e" refkind="member"><highlight class="preprocessor">#define<sp/>LWFSM_STOP_ERROR<sp/>0xFFFFFFFFUL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="140" refid="group__LwFSM__Macros_1gac21ce3d980668fa04aa139d8668562c7" refkind="member"><highlight class="preprocessor">#define<sp/>LWFSM_STATES_START(states_list)<sp/>typedef<sp/>enum<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="150" refid="group__LwFSM__Macros_1ga7ca4246c6f9ad044558e01e86bf50780" refkind="member"><highlight class="preprocessor">#define<sp/>LWFSM_STATES_DECL(fsm_state)<sp/>fsm_state,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="162" refid="group__LwFSM__Macros_1ga99ead8ed2ab2224e3b413649e8b8a0b0" refkind="member"><highlight class="preprocessor">#define<sp/>LWFSM_STATES_FULL_DECL(fsm_state,<sp/>fsm_state_name,<sp/>fsm_state_function)<sp/>redefine_me_in_the_code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="169" refid="group__LwFSM__Macros_1ga6e8e57867e6a527dda0ecd6357591a23" refkind="member"><highlight class="preprocessor">#define<sp/>LWFSM_STATES_END(states_list)<sp/>}<sp/>lwfsm_##states_list##_t;<sp/></highlight><highlight class="comment">/*<sp/>FSM<sp/>states<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="177" refid="group__LwFSM__Macros_1ga6fd32c62089945bf5c7ebdcab41de5b7" refkind="member"><highlight class="preprocessor">#define<sp/>LWFSM_TABLE_START(table_name)<sp/>const<sp/>lwfsm_table_row_t<sp/>table_name[]<sp/>=<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="185" refid="group__LwFSM__Macros_1gad87a9e1cce6fc08e89933265e55b6ac7" refkind="member"><highlight class="preprocessor">#define<sp/>LWFSM_TABLE_ENTRY(state_function)<sp/>{state_function},</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="192" refid="group__LwFSM__Macros_1ga428f76188b9d9fb7891f2e01b5d5703c" refkind="member"><highlight class="preprocessor">#define<sp/>LWFSM_TABLE_END(table_name)<sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="200" refid="group__LwFSM__Macros_1ga5fdaff8a2635b38f9115e138087e1d28" refkind="member"><highlight class="preprocessor">#define<sp/>LWFSM_LOGS_NAME_START(states_log_names)<sp/>const<sp/>char<sp/>*<sp/>states_log_names[]<sp/>=<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="208" refid="group__LwFSM__Macros_1gacf7268f80d00bd916e65322d97c90b7b" refkind="member"><highlight class="preprocessor">#define<sp/>LWFSM_LOG_NAME_DECL(fsm_state_name)<sp/>fsm_state_name,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="215" refid="group__LwFSM__Macros_1ga14f596f7e0685f15a93bc45c99655bf5" refkind="member"><highlight class="preprocessor">#define<sp/>LWFSM_LOGS_NAME_END(states_log_names)<sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="preprocessor">#if<sp/>LWFSM_USE_LOG<sp/>==<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal">lwfsm_status_t<sp/><ref refid="group__LwFSM__API__M1_1ga5d031ea56c1b3524b1ff6978f636fb5b" kindref="member">lwfsm_init_state_machine</ref>(<ref refid="structlwfsm__ctxt__t" kindref="compound">lwfsm_ctxt_t</ref><sp/>*fsm_ctxt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlwfsm__table__row__t" kindref="compound">lwfsm_table_row_t</ref><sp/>*fsm_table,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>*states_log_names,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>initial_state);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal">lwfsm_status_t<sp/><ref refid="group__LwFSM__API__M1_1ga5d031ea56c1b3524b1ff6978f636fb5b" kindref="member">lwfsm_init_state_machine</ref>(<ref refid="structlwfsm__ctxt__t" kindref="compound">lwfsm_ctxt_t</ref><sp/>*<sp/>fsm_ctxt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlwfsm__table__row__t" kindref="compound">lwfsm_table_row_t</ref><sp/>*fsm_table,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>initial_state);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>LWFSM_USE_LOG<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="preprocessor">#if<sp/>LWFSM_USE_CONTEXT<sp/>==<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal">lwfsm_status_t<sp/><ref refid="group__LwFSM__API__M1_1gad54a06d0aa371d4a631a1fe056f8bd0e" kindref="member">lwfsm_run_state_machine</ref>(<ref refid="structlwfsm__ctxt__t" kindref="compound">lwfsm_ctxt_t</ref><sp/>*<sp/>fsm_ctxt,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>user_ctxt);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal">lwfsm_status_t<sp/><ref refid="group__LwFSM__API__M1_1gad54a06d0aa371d4a631a1fe056f8bd0e" kindref="member">lwfsm_run_state_machine</ref>(<ref refid="structlwfsm__ctxt__t" kindref="compound">lwfsm_ctxt_t</ref><sp/>*<sp/>fsm_ctxt);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>LWFSM_USE_CONTEXT<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="preprocessor">#if<sp/>LWFSM_USE_PROGMOD2<sp/>==<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="preprocessor">#if<sp/>LWFSM_USE_LOG<sp/>==<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal">lwfsm_status_t<sp/><ref refid="group__LwFSM__API__M2_1gaa16284f1422ff96d7bc550deb7ef97ce" kindref="member">lwfsm_init_state_machineM2</ref>(<ref refid="structlwfsm__ctxt2__t" kindref="compound">lwfsm_ctxt2_t</ref><sp/>*fsm_ctxt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlwfsm__table__row__t" kindref="compound">lwfsm_table_row_t</ref><sp/>*fsm_table,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>*states_log_names,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>initial_state,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>nb_states);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal">lwfsm_status_t<sp/><ref refid="group__LwFSM__API__M2_1gaa16284f1422ff96d7bc550deb7ef97ce" kindref="member">lwfsm_init_state_machineM2</ref>(<ref refid="structlwfsm__ctxt2__t" kindref="compound">lwfsm_ctxt2_t</ref><sp/>*<sp/>fsm_ctxt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlwfsm__table__row__t" kindref="compound">lwfsm_table_row_t</ref><sp/>*fsm_table,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>initial_state,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>nb_states);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>LWFSM_USE_LOG<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="preprocessor">#if<sp/>LWFSM_USE_CONTEXT<sp/>==<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal">lwfsm_status_t<sp/><ref refid="group__LwFSM__API__M2_1ga711182eae8128494523ed4865433e2d9" kindref="member">lwfsm_run_state_machineM2</ref>(<ref refid="structlwfsm__ctxt2__t" kindref="compound">lwfsm_ctxt2_t</ref><sp/>*<sp/>fsm_ctxt,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>user_ctxt);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal">lwfsm_status_t<sp/><ref refid="group__LwFSM__API__M2_1ga711182eae8128494523ed4865433e2d9" kindref="member">lwfsm_run_state_machineM2</ref>(<ref refid="structlwfsm__ctxt2__t" kindref="compound">lwfsm_ctxt2_t</ref><sp/>*<sp/>fsm_ctxt);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>LWFSM_USE_CONTEXT<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>LWFSM_USE_PROGMOD2<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal">}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>__cplusplus<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>LWFSM_HDR_API_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/__w/lwfsm/lwfsm/lwfsm/src/include/lwfsm/lwfsm.h"/>
  </compounddef>
</doxygen>
